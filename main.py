import os
import re
import requests
from flask import Flask, request
from telegram import Bot, Update
from telegram.ext import Dispatcher, MessageHandler, Filters, CommandHandler, CallbackContext
# from keep_alive import keep_alive

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID"))  # –Ω–∞–ø—Ä–∏–º–µ—Ä: 908080934

bot = Bot(token=TOKEN)
app = Flask(__name__)
dispatcher = Dispatcher(bot, None, workers=1)  # –í–∞–∂–Ω–æ: —Ö–æ—Ç—è –±—ã 1 worker!

# –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏—à–∏–Ω–≥–æ–≤–æ–π —Å—Å—ã–ª–∫–∏
def is_phishing_link(url):
    patterns = ["login", "secure", ".xyz", ".zip", "@", "paypal", "verify"]
    return any(p in url.lower() for p in patterns)

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞
def notify_owner(original_message, sender_id):
    try:
        bot.send_message(
            chat_id=OWNER_ID,
            text=f"üö® –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∏—à–∏–Ω–≥–æ–≤–∞—è —Å—Å—ã–ª–∫–∞:\n–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sender_id}:\n{original_message}"
        )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü—É:", e)

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext):
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É, —è –ø—Ä–æ–≤–µ—Ä—é –µ—ë –Ω–∞ —Ñ–∏—à–∏–Ω–≥.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(update: Update, context: CallbackContext):
    if not update.message or not update.message.text:
        return

    user_text = update.message.text
    user_id = update.message.chat.id

    urls = re.findall(r'https?://\S+', user_text)
    if urls:
        flagged = False
        for url in urls:
            if is_phishing_link(url):
                update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–∏—à–∏–Ω–≥–æ–≤–∞—è —Å—Å—ã–ª–∫–∞!")
                notify_owner(user_text, user_id)
                flagged = True
        if not flagged:
            update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –≤—ã–≥–ª—è–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–π.")
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ Telegram —á–µ—Ä–µ–∑ Webhook
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    try:
        update = Update.de_json(request.get_json(force=True), bot)
        dispatcher.process_update(update)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ update:", e)
    return "ok"

# –ó–∞–ø—É—Å–∫ keep_alive (–µ—Å–ª–∏ —Ç—ã –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –¥–ª—è Render)
keep_alive()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if __name__ == "__main__":
    WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=8080)
